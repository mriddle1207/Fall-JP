import cmath
import numpy as np
from scipy.stats import unitary_group
import matplotlib.pyplot as plt

a = 1/(2)+0j  #alpha
b = 1/2+0j  #beta
c = 1/2+0j  #gamma
d = 1/(2)+0j  #delta


def PosFEF2(a,b,c,d):
    U = unitary_group.rvs(2)
    I2 = np.identity(2)
    UtensI2 = np.kron(U, I2)
    UtensI2dag = UtensI2.conjugate().T
    PsiEntKet = 1 / np.sqrt(2) * np.array([[1], [0], [0], [1]])
    PsiEntBra = PsiEntKet.T
    Rho = np.array([[a * a.conjugate(), a * b.conjugate(), a * c.conjugate(), a * d.conjugate()],
                    [b * a.conjugate(), b * b.conjugate(), b * c.conjugate(), b * d.conjugate()],
                    [c * a.conjugate(), c * b.conjugate(), c * c.conjugate(), c * d.conjugate()],
                    [d * a.conjugate(), d * b.conjugate(), d * c.conjugate(), d * d.conjugate()]])
    return (PsiEntBra @ UtensI2 @ Rho @ UtensI2dag @ PsiEntKet).item()

#print(PosFEF2(a,b,c,d))

def FullyEntangledFraction2(a,b,c,d,trials):
    frac = 0
    i = 0
    while i < trials:
        F=PosFEF2(a,b,c,d).real
        if F > frac:
            frac = F
        i+=1
    return frac


#print(FullyEntangledFraction2(a,b,c,d,100))

xarr = np.linspace(0,30,31)
yarr = []

for x in xarr:
    y = FullyEntangledFraction2(a,b,c,d,x)
    yarr.append(y)

print(xarr)
print(yarr)

# Plot the function
plt.figure(figsize=(8, 6))  # Set the figure size
plt.plot(xarr, yarr, label="maxFEF", color="blue")
plt.axhline(y=0.7887, color='red', linestyle='--', linewidth=1.5, label='Steerable = 0.7887')  # Horizontal line

# Add labels, title, and legend
plt.title("Graph of max Fully Entangled Fraction vs. Trails", fontsize=14)
plt.xlabel("trials", fontsize=12)
plt.ylabel("maxFEF", fontsize=12)
plt.axhline(0, color="black", linewidth=0.8)  # x-axis
plt.axvline(0, color="black", linewidth=0.8)  # y-axis
plt.grid(True)  # Add a grid
plt.legend(fontsize=12)

# Show the plot
plt.show()